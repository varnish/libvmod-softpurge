varnishtest "Test softpurge vmod"

server s1 {
	rxreq
	txresp

	# the purge restart target, avoiding vcl_error error which closes connection.
	rxreq
	txresp

	rxreq
	txresp
} -start

varnish v1 -vcl+backend {
	import softpurge from "${vmod_topbuild}/src/.libs/libvmod_softpurge.so";
	backend b1 {
		.host = "${s1_addr}";
		.port = "${s1_port}";
	}

	sub vcl_recv {
		set req.backend_hint = b1;
		
		if (req.method == "PURGE") { return(hash); }
	}

	sub vcl_backend_response {
		set beresp.ttl = 1m;
		set beresp.grace = 10m;
	}

	sub vcl_miss {
		set req.http.x-via = "miss";
	}

	sub vcl_hit {
		set req.http.x-via = "hit";

		if (req.method == "PURGE") {
			softpurge.softpurge();
			set req.url = "/exists";
			set req.method = "GET";
			unset req.http.x-via;
			return(restart);
		}
		set req.http.x-ttl = obj.ttl;
		set req.http.x-grace = obj.grace;
	}

	sub vcl_deliver {
		set resp.http.x-object-hits = obj.hits;
		set resp.http.x-via = req.http.x-via;
		set resp.http.x-object-ttl = req.http.x-ttl;
		set resp.http.x-object-grace = req.http.x-grace;
	}

} -start

client c1 {
	txreq -url "/"
	rxresp
	expect resp.http.x-via == "miss"

	txreq -url "/"
	rxresp
	expect resp.status == 200
	expect resp.http.x-via == "hit"

	delay 2

	# run the softpurge
	txreq -req "PURGE" -url "/"
	rxresp

	# check that grace is used.
	txreq -url "/"
	rxresp
	expect resp.http.x-via == "hit"
	expect resp.status == 200
	expect resp.http.x-object-hits != 0
	expect resp.http.x-object-ttl <= 0

	# check that the obj was refreshed via a bgfetch in prev req
	txreq -url "/"
	rxresp
	expect resp.http.x-via == "hit"
	expect resp.status == 200
	#This can be used in master branch
	#expect resp.http.x-object-hits == 0
} -run

